{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,0GCuD5BC,MAnDf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,4HAEF,yBAAKA,UAAU,iBAAf,oRAEE,6BAAK,6BAFP,8ZAIA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,0BAAf,kCACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,YAAf,sKACA,yBAAKA,UAAU,YAAf,mPAAuE,6BAAvE,mOAIF,yBAAKA,UAAU,YAAf,8IACA,yBAAKA,UAAU,YAAf,0VAAyF,6BAAzF,+RAGA,yBAAKA,UAAU,YAAf,wIACA,yBAAKA,UAAU,YAAf,+GACyB,6BADzB,4TAGkB,6BAHlB,+IAKF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,0BAAf,oDACA,yBAAKA,UAAU,iBAAf,s5BAKM,yBAAKA,UAAU,kBACnB,yBAAKA,UAAU,0BAAf,sBACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,YACb,uBAAGC,KAAK,mCAAR,mBAEF,yBAAKD,UAAU,QACb,uBAAGC,KAAK,mCAAR,6BAAoE,mCClC9DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7749f66f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"page_title\">\n        <div>ニュースアドバイザー「ITrink」とは</div>\n      </div>\n      <div className=\"first_content\">\n        ITrinkは、SNSでのうその情報やフェイクニュースが広まることを防ぐことを目的に作られたサービスです。\n        <br/><br/>Twitterでたくさんの人に見られている投稿を見つけ、内容が危険なものではないかの判断を自動で分析しTwitterを使う人たちがわかりやすいように表示します。\n      </div>\n      <div className=\"second_content\">\n        <div className=\"second__content__title\">ITrinkについて</div>\n        <div className=\"q_and_a_content\">\n          <div className=\"Itrink_q\">・ITrinkがみつける投稿は内容が怪しいものということですか？</div>\n          <div className=\"Itrink_a\">いいえ、ITrinkがみつけるのは「これからたくさんの人に見られるかもしれない投稿」です。<br />\n            ITrinkがみつけるものがフェイクニュースやデマときまっているわけではありません。</div>\n        </div>\n\n        <div className=\"Itrink_q\">・ITrinkはどうやって真偽の分析をしているんですか？</div>\n        <div className=\"Itrink_a\">Twitterにある、過去たくさんの人の目に触れた投稿や誰かに見せたくなる文章の書きかたを参考にみつけた投稿を分析しています。<br/>\n          また、内容がきちんとほんとうかどうかを調べその結果も含めた分析結果を点数にして表示して\n          います。</div>\n        <div className=\"Itrink_q\">・ITrinkがつける点数はどのようにみればいいですか</div>\n        <div className=\"Itrink_a\">\n          ITrinkがつける点数はあくまでも目安です。<br/>\n          高い点数だから信じられる内容である。低い点数なので嘘の情報であるといった\n          判断はしないようにしてください。<br/>判断基準のひとつとしてみていただくと幸いです。</div>\n      </div>\n      <div className=\"second_content\">\n        <div className=\"second__content__title\">ITrinkが作られた理由</div>\n        <div className=\"first_content\">\n          ITrinkはCode for Japan主催の「社会問題解決のサービス開発コンテスト Civitech Challenge Cup U22」の\n          に出場するチーム「itrink」によって開発されています。コロナ禍でSNS上の様々な憶測や情報が飛びかう中、\n          情報の真偽を確かめる材料が増えることがSNSユーザーに情報のチェックを促すことに繋がり、情報に錯そうされることを防ごうという理念の元つくられています。\n        </div>\n        </div><div className=\"second_content\">\n          <div className=\"second__content__title\">リンク</div>\n          <div className=\"first_content\">\n            <div className=\"top-link\">\n              <a href=\"https://twitter.com/rumor_check\">ITrink Twitter</a>\n            </div>\n            <div className=\"link\">\n              <a href=\"https://ccc2020.code4japan.org/\">CivitechChallengeCup[U-22]<br /></a>\n            </div>\n          </div>\n        </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}